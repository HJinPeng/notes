# workflow 工作流名字
name: web

# 触发事件
on:
  push: # 监听 main 分支的 push 事件
    branches:
      - main

# 环境变量
env:
  PROJECT: notes
  DOCKER_REGISTRY: registry.cn-heyuan.aliyuncs.com
  DOCKER_IMAGE: jinpengh/notes
  DOCKER_TAG: ${{ github.ref_name }}-${{ github.sha }}

  IMAGE: registry.cn-heyuan.aliyuncs.com/jinpengh/notes:${{ github.ref_name }}-${{ github.sha }}

# 作业
jobs:
  # job的id
  build:
    # GitHub 托管的 linux 运行器
    runs-on: ubuntu-latest
      
    # job的一系列任务，每一个 step 或者是执行一个 action，或者是执行一个命令
    steps:
      - name: Checkout # 定义step的名字，方便日志排查
        uses: actions/checkout@v3 # uses 表示该步骤使用一个 action 。斜线前面的 'actions' 表示这是官方的action

      - name: Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Build
        run: npm install -g yarn && yarn && yarn build

      - name: Docker
        uses: 1-1is0/docker-compose-build-push@publish
        with:
          image: ${{ env.DOCKER_IMAGE }}
          tags: ${{ env.DOCKER_TAG }}
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
          dockerfile: Dockerfile
          pushImage: true

      - name: Deploy
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
        with:
          host: ${{ secrets.SERVER_HOST }}
          user: ${{ secrets.SERVER_USER }}
          pass: ${{ secrets.SERVER_PASS }}

          # 由于网络情况，很容易超时，设置为60s
          connect_timeout: 60s

          # 将工作目录下的文件全部拷贝到部署服务器的工作目录
          scp: |
            ./docker-compose.yml => ./docker-compose/${{ env.PROJECT }}

          # 完成拷贝后在部署服务器执行的命令：进入项目目录，安装生产依赖，并使用 pm2 管理
          last_ssh: |
            cd ./docker-compose/${{ env.PROJECT }}
            docker image rm $(docker image ls -q ${{ env.DOCKER_REGISTRY }}${{ env.DOCKER_IMAGE }})
            PROJECT=${{ env.PROJECT}} IMAGE=${{ env.IMAGE }} docker-compose up -d

