#nginx进程数，通常设置成和cpu的数量相等
worker_processes auto;

#全局错误日志定义类型
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#进程pid文件
#pid        logs/nginx.pid;

#参考事件模型
events {
  #单个进程最大连接数（最大连接数=连接数+进程数）
  worker_connections  1024;
}

#设定http服务器
http {
  #文件扩展名与文件类型映射表
  include       mime.types;
  #默认文件类型
  default_type  application/octet-stream;

  #日志格式设定
  #$remote_addr与 $http_x_forwarded_for用以记录客户端的ip地址；
  #$remote_user：用来记录客户端用户名称；
  #$time_local： 用来记录访问时间与时区；
  #$request： 用来记录请求的url与http协议；
  #$status： 用来记录请求状态；成功是200，
  #$body_bytes_sent ：记录发送给客户端文件主体内容大小；
  #$http_referer：用来记录从那个页面链接访问过来的；
  #$http_user_agent：记录客户浏览器的相关信息；
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  # access_log  logs/access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  #keepalive_timeout  0;
  #长连接超时时间，单位是秒
  keepalive_timeout  65;

  #gzip  on;

  #设定通过nginx上传文件的大小
  client_max_body_size   20m;

  #虚拟主机的配置
  server {
    #监听端口
    listen       80;
    #域名可以有多个，用空格隔开
    server_name  127.0.0.1;

    #gzip on;                     # 开启gzip压缩功能
    #gzip_min_length 10k;         # 设置允许压缩的页面最小字节数; 这里表示如果文件小于10个字节，就不用压缩，因为没有意义，本来就很小.
    #gzip_buffers 4 16k;          # 设置压缩缓冲区大小，此处设置为4个16K内存作为压缩结果流缓存
    #gzip_http_version 1.1;       # 压缩版本
    #gzip_comp_level 2;           # 设置压缩比率，最小为1，处理速度快，传输速度慢；
    #gzip_types text/css text/xml application/javascript application/x-javascript;      # 制定压缩的类型,线上配置时尽可能配置多的压缩类型!
    #gzip_disable "MSIE [1-6]\.";       # 配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）
    #gzip_vary on;    # 选择支持vary header；改选项可以让前端的缓存服务器缓存经过gzip压缩的页面; 
    #gzip_proxied off; # nginx做为反向代理时启用,off(关闭所有代理结果的数据的压缩)

    #charset koi8-r;

    #定义本虚拟主机的访问日志
    access_log  /visit.log  main; # 注意，在 Dockerfile 中创建 /visit.log

    #入口文件的设置
    location / {
      root   /usr/share/nginx/html;   #入口文件的所在目录
      index  index.html index.htm;    #默认入口文件名称
      try_files $uri $uri/ /index.html;
    }
    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   html;
    }
  }
}